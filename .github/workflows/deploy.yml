name: Deploy to Vercel (Deploy Hook)

on:
  push:
    branches:
      - main
  workflow_dispatch: {}
  release:
    types: [published]

jobs:
  trigger-vercel-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Trigger Vercel Deploy Hook
        if: ${{ secrets.VERCEL_DEPLOY_HOOK_URL != '' }}
        run: |
          curl -fsS -X POST "$VERCEL_DEPLOY_HOOK_URL" || exit 1
        env:
          VERCEL_DEPLOY_HOOK_URL: ${{ secrets.VERCEL_DEPLOY_HOOK_URL }}

      - name: Echo missing hook
        if: ${{ secrets.VERCEL_DEPLOY_HOOK_URL == '' }}
        run: |
          echo "VERCEL_DEPLOY_HOOK_URL secret is not set. Skipping deploy trigger." && exit 0

name: Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch: {}

permissions:
  contents: read
  deployments: write

jobs:
  vercel:
    if: ${{ secrets.VERCEL_TOKEN != '' && secrets.VERCEL_ORG_ID != '' && secrets.VERCEL_PROJECT_ID != '' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 10
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
      - name: Install deps
        run: pnpm install --frozen-lockfile=false
      - name: Lint, Typecheck, Test
        run: pnpm check
      - name: Install Vercel CLI
        run: pnpm add -g vercel@latest
      - name: Vercel Build and Deploy
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          NODE_ENV: production
        run: |
          vercel pull --yes --environment=production --token=$VERCEL_TOKEN
          vercel build --prod --token=$VERCEL_TOKEN
          vercel deploy --prebuilt --prod --token=$VERCEL_TOKEN

  netlify:
    if: ${{ secrets.NETLIFY_AUTH_TOKEN != '' && secrets.NETLIFY_SITE_ID != '' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 10
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
      - name: Install deps
        run: pnpm install --frozen-lockfile=false
      - name: Lint, Typecheck, Test
        run: pnpm check
      - name: Install Netlify CLI
        run: pnpm add -g netlify-cli@latest
      - name: Netlify Deploy (SSR via Next on Netlify)
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NODE_ENV: production
        run: |
          pnpm build
          netlify deploy --dir=.next --site $NETLIFY_SITE_ID --auth $NETLIFY_AUTH_TOKEN --prod --message "CI deploy"

  github_pages:
    if: ${{ secrets.GITHUB_TOKEN != '' && vars.ENABLE_GH_PAGES == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 10
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
      - name: Install deps
        run: pnpm install --frozen-lockfile=false
      - name: Build static export
        run: |
          pnpm build || true
          pnpm run export || true
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
